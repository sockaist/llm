{
    "title": "[KAIST SoC Colloquium] 6／1, 4pm, Abhik Roychoudhury (National University of Singapore ／ Professor)",
    "date": "2020-06-01T00:00:00Z",
    "link": "https://cs.kaist.ac.kr/board/view?bbs_id=events&bbs_sn=9191&page=1&skey=&svalue=&menu=86",
    "content": "title:[KAIST SoC Colloquium] 6／1, 4pm, Abhik Roychoudhury (National University of Singapore ／ Professor) date:2020-06-01T00:00:00Z link:https://cs.kaist.ac.kr/board/view?bbs_id=events&bbs_sn=9191&page=1&skey=&svalue=&menu=86 content:Speaker Abhik Roychoudhury (National University of Singapore / Professor) Title Trustworthy Software and Automated Program Repair Abstract Symbolic analysis of programs were first studied for the purpose of program verification. In recent decades, symbolic execution technology has witnessed renewed interest due to the maturity of Satisfiability Modulo Theory (SMT) solvers. We have leveraged the back-end solvers to systematically navigate large search spaces leading to application of symbolic analysis in test generation. In this talk, we will first study the power of state-of-the-art symbolic execution based approaches for detecting software vulnerabilities, such as tools for finding zero-day vulnerabilities and crash reproduction. We compare the symbolic analysis approaches to grey-box fuzz testing approaches which are routinely employed in industrial settings for finding vulnerabilities in programs, to understand the ongoing work in industry practice. In the later part of the talk, we will conceptualize the use of symbolic approaches and tools for purposes beyond guiding search. We will sketch the usage of symbolic execution in inferring specification of intended program behavior, even when no formal models are available.This is done by analyzing a buggy program against selected tests. Such specification inference capability can be combined with program synthesis technology to automatically repair programs. Automated program repair via symbolic execution goes beyond search-based approaches which lift patches from elsewhere in the program. Such an approach can construct ìimaginativeî patches and serves as a test-bed for the grand-challenge of automated programming, It contributes to the vision of self-healing software of the future, where un-trustworthiness of learning components can be compensated via self-healing. Bio Abhik Roychoudhury is a Professor (Provost's Chair) of Computer Science at the National University of Singapore. He is the Director of the National Satellite of Excellence in Trustworthy Software Systems at Singapore. He is also the Lead Principal Investigator of the Singapore Cyber-security Consortium, which is a consortium of over 30 companies in the cyber-security space engaging with academia for research and collaboration. His research focuses on software testing and analysis, software security and trust-worthy systems. His research on automatically repairing programs at a large scale contributes to the vision of self-healing software. Many of his recent research works have led to usage such as the research on program repair has been used for teaching of introductory programming via the Prutor system in India, and his research on fuzz testing in the form of the AFLFast tool has been integrated into the American Fuzzy Lop (AFL) fuzzer which is used by corporations for finding software vulnerabilities. He has served as an Associate Editor of IEEE Transactions on Software Engineering (TSE) during 2014-18, and is currently serving as an Associate Editor of IEEE Transactions on Dependable and Secure Computing (TDSC), ACM Transactions on Software Engineering and Methodology (TOSEM). His former doctoral students have been placed at universities all over the world as academics and have received various awards for their doctoral research including an ACM SIGSOFT Outstanding Doctoral Dissertation Award. Abhik received his own Ph.D. in Computer Science from the State University of New York at Stony Brook in 2000. Language English Slide https://cs.kaist.ac.kr/colloquium/assets/slide_200601.pdf Notice https://kaist.zoom.us/j/94331062658 location: Online(zoom) tag:csweb.calendar",
    "location": " Online(zoom)",
    "tag": "csweb.calendar",
    "id": 25
}