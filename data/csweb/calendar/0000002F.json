{
    "title": "[KAIST SoC Colloquium] 9／21 4pm, Prof. Jeehoon Kang, ˝When is it safe to free memory in concurrent programming？ (An opinionated survey of concurrent memory reclamation algorithms)˝",
    "date": "2020-09-21T00:00:00Z",
    "link": "https://cs.kaist.ac.kr/board/view?bbs_id=events&bbs_sn=9372&page=1&skey=&svalue=&menu=86",
    "content": "title:[KAIST SoC Colloquium] 9／21 4pm, Prof. Jeehoon Kang, ˝When is it safe to free memory in concurrent programming？ (An opinionated survey of concurrent memory reclamation algorithms)˝ date:2020-09-21T00:00:00Z link:https://cs.kaist.ac.kr/board/view?bbs_id=events&bbs_sn=9372&page=1&skey=&svalue=&menu=86 content:- Speaker : Prof. Jeehoon Kang (KAIST) - Title : When is it safe to free memory in concurrent programming? (An opinionated survey of concurrent memory reclamation algorithms) - Time : 16:00, Sep 21, 2020 - Place : Via Zoom due to COVID-19 ( Link: https://kaist.zoom.us/j/91214104787?pwd=dzNiYWd0VDh6NXQ3T3c0ZkhWSjVDUT09 ) - Language : English Here is the speaker's short biography and the talk's abstract: Bio Jeehoon Kang joined KAIST School of Computing as an assistant professor in 2019. He is interested in understanding systems in the viewpoint of programming languages. He is especially focused on designing and verifying concurrent programs for massively parallel workloads, which are going to be even more crucial in the era of big data and artificial intelligence. Currently, he is working on (1) designing compilers for massively parallel workloads like networking and artificial intelligence to FPGA/ASIC; (2) designing operational semantics for emerging hardware like persistent memory and many-core systems; (3) verifying concurrent programs like task schedulers and operating systems; and (4) verifying compilers for concurrent programs. Jeehoon received his Ph.D. and B.S. from Seoul National University in 2019 and 2013, respectively. He received a PLDI distinguished paper award in 2017, and a doctoral dissertation award from the Department of Computer Science and Engineering, Seoul National University in 2019. He is a maintainer of Crossbeam, a Rust concurrency library. He is a Founder of FuriosaAI, a fabless startup building next-generation AI chips. Abstract Systems programmers should not free memory before it is used. But it is challenging to do so even in sequential programs---in which no threads are involved---because each memory object's lifetime should be explicitly tracked. It is only worsened in concurrent programs---in which memory may be freed and used in different threads---because the different threads should be synchronized. To mitigate the difficulty, tracing garbage collectors---which automatically reclaim memory without programmer's involvement---are widely used, but they usually result in reduced throughput and unexpectedly high tail latency. Thus for those systems like operating systems or database management systems, we need a more lightweight and yet easy-to-use solution for memory reclamation. In this talk, I will give a brief survey of concurrent memory reclamation algorithms. I will introduce five desired properties of reclamation algorithms, namely being fast, robust (i.e., a \"bad\" thread doesn't hinder reclamation), compact (i.e., space overhead is small), self-contained (i.e., special OS/hardware features are not relied on), and widely applicable (i.e., many data structures are supported). With these five properties, I will evaluate a few representative reclamation algorithms, including hazard pointers, epoch-based reclamation, and the two's hybrids. We will briefly showcase our new reclamation algorithm (PLDI 2020) that, for the first time in the literature, satisfies all the desired properties. location: Online(zoom) tag:csweb.calendar",
    "location": " Online(zoom)",
    "tag": "csweb.calendar",
    "id": 47
}